/**
 * Generates a complete svg image from a PuzzleData object
 * 
 * @param {PuzzleData} puzzleData 
 */
export function getPuzzleSvg(tempshape,temphex, startquest){

    
    const textSize = 21
    const textWeigth = 'normal'

    let shapeSVG = createShape(tempshape, "#FFFFFF")
    if(startquest==1){
        shapeSVG = createShape(tempshape, temphex)
    }
    //const topText = createText(puzzleData.text[0].toUpperCase(), puzzleData.colors['colortext'], textSize, textWeigth, 31)
    //const bottomText = createText(puzzleData.text[1].toUpperCase(), puzzleData.colors['shapetext'], textSize, textWeigth, 67)
    //const numberText = createText(puzzleData.number, puzzleData.colors['number'], 60, 100, 50, 'Arial, Helvetica')

    return createSVG([shapeSVG])
}

// Takes multiple SVG strings and combines them to a svg
const createSVG = (elements) => `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 150 150"> ${elements.join("\n")} </svg>`

const createShape = (shape, color) => SHAPE_SVG[shape](color)

const SHAPE_SVG = {
    'square' : (c) => `<rect fill=${c} stroke="#000" stroke-width="1" width="150" height="150"/>`, 
    'triangle': (c) => `<polygon  fill=${c}  stroke="#000" stroke-width="1" points="0 150 75 0 150 150 0 150"/>`, 
    'rectangle' : (c) =>`<rect y="30" fill=${c}  stroke="#000" stroke-width="1" class="shape" width="150" height="90"/>`, 
    'circle' : (c) => `<circle fill=${c}  stroke="#000" stroke-width="1" cx="75" cy="75" r="75"/>`,
    'turnonoff' : (c) => `<path fill=${c} d="M 75 146.777344 C 37.03125 146.777344 6.152344 116.835938 6.152344 80.039062 C 6.152344 54.316406 20.976562 31.316406 44.851562 20.007812 C 47.839844 18.601562 51.414062 19.863281 52.820312 22.851562 C 54.226562 25.839844 52.96875 29.414062 49.980469 30.820312 C 30.320312 40.136719 18.132812 58.972656 18.132812 80.039062 C 18.132812 110.242188 43.652344 134.824219 75 134.824219 C 106.347656 134.824219 131.867188 110.242188 131.867188 80.039062 C 131.867188 58.828125 118.976562 39.34375 98.996094 30.378906 C 95.976562 29.03125 94.628906 25.488281 95.976562 22.46875 C 97.324219 19.453125 100.867188 18.105469 103.886719 19.480469 C 128.171875 30.351562 143.847656 54.140625 143.847656 80.039062 C 143.847656 116.835938 112.96875 146.777344 75 146.777344 Z M 75 146.777344 "/>
    <path fill=${c} d="M 75 84.34375 C 71.6875 84.34375 69.023438 81.679688 69.023438 78.367188 L 69.023438 9.199219 C 69.023438 5.890625 71.71875 3.222656 75 3.222656 C 78.3125 3.222656 80.976562 5.890625 80.976562 9.199219 L 80.976562 78.367188 C 80.976562 81.679688 78.308594 84.34375 75 84.34375 Z M 75 84.34375 "/>`,
    
    'harddrive' : (c) => `<path fill=${c} d="M 121.875 9.375 L 28.125 9.375 L 2.8125 84.375 L 147.1875 84.375 Z M 121.875 9.375 "/>
    <path fill=${c} d="M 0 93.75 L 0 140.625 L 150 140.625 L 150 93.75 Z M 28.125 121.875 L 18.75 121.875 L 18.75 112.5 L 28.125 112.5 Z M 65.625 121.875 L 37.5 121.875 L 37.5 112.5 L 65.625 112.5 Z M 65.625 121.875 "/>
    `,

    'network' : (c) => `<path fill=${c} d="M 150 76.875 L 150 73.125 C 150 71.054688 148.320312 69.375 146.25 69.375 L 80.625 69.375 L 80.625 60 L 97.5 60 C 101.640625 60 105 56.640625 105 52.5 L 105 22.5 C 105 18.359375 101.640625 15 97.5 15 L 52.5 15 C 48.359375 15 45 18.359375 45 22.5 L 45 52.5 C 45 56.640625 48.359375 60 52.5 60 L 69.375 60 L 69.375 69.375 L 3.75 69.375 C 1.679688 69.375 0 71.054688 0 73.125 L 0 76.875 C 0 78.945312 1.679688 80.625 3.75 80.625 L 28.125 80.625 L 28.125 90 L 15 90 C 10.859375 90 7.5 93.359375 7.5 97.5 L 7.5 127.5 C 7.5 131.640625 10.859375 135 15 135 L 52.5 135 C 56.640625 135 60 131.640625 60 127.5 L 60 97.5 C 60 93.359375 56.640625 90 52.5 90 L 39.375 90 L 39.375 80.625 L 110.625 80.625 L 110.625 90 L 97.5 90 C 93.359375 90 90 93.359375 90 97.5 L 90 127.5 C 90 131.640625 93.359375 135 97.5 135 L 135 135 C 139.140625 135 142.5 131.640625 142.5 127.5 L 142.5 97.5 C 142.5 93.359375 139.140625 90 135 90 L 121.875 90 L 121.875 80.625 L 146.25 80.625 C 148.320312 80.625 150 78.945312 150 76.875 Z M 60 45 L 60 30 L 90 30 L 90 45 Z M 45 120 L 22.5 120 L 22.5 105 L 45 105 Z M 127.5 120 L 105 120 L 105 105 L 127.5 105 Z M 127.5 120 "/>`,
    'download' : (c) => `<path fill=${c} d="M 63.28125 0 L 86.71875 0 C 90.617188 0 93.75 3.132812 93.75 7.03125 L 93.75 56.25 L 119.445312 56.25 C 124.65625 56.25 127.265625 62.546875 123.574219 66.242188 L 79.015625 110.828125 C 76.816406 113.027344 73.210938 113.027344 71.015625 110.828125 L 26.398438 66.242188 C 22.703125 62.546875 25.3125 56.25 30.527344 56.25 L 56.25 56.25 L 56.25 7.03125 C 56.25 3.132812 59.382812 0 63.28125 0 Z M 150 110.15625 L 150 142.96875 C 150 146.867188 146.867188 150 142.96875 150 L 7.03125 150 C 3.132812 150 0 146.867188 0 142.96875 L 0 110.15625 C 0 106.257812 3.132812 103.125 7.03125 103.125 L 50.007812 103.125 L 64.367188 117.480469 C 70.253906 123.367188 79.746094 123.367188 85.632812 117.480469 L 99.988281 103.125 L 142.96875 103.125 C 146.867188 103.125 150 106.257812 150 110.15625 Z M 113.671875 135.9375 C 113.671875 132.714844 111.035156 130.078125 107.8125 130.078125 C 104.589844 130.078125 101.953125 132.714844 101.953125 135.9375 C 101.953125 139.160156 104.589844 141.796875 107.8125 141.796875 C 111.035156 141.796875 113.671875 139.160156 113.671875 135.9375 Z M 132.421875 135.9375 C 132.421875 132.714844 129.785156 130.078125 126.5625 130.078125 C 123.339844 130.078125 120.703125 132.714844 120.703125 135.9375 C 120.703125 139.160156 123.339844 141.796875 126.5625 141.796875 C 129.785156 141.796875 132.421875 139.160156 132.421875 135.9375 Z M 132.421875 135.9375 "/>
    `,
    

}

//'turnonoff' : (c) => `<path fill=${c}  <path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;" d="M 75 146.777344 C 37.03125 146.777344 6.152344 116.835938 6.152344 80.039062 C 6.152344 54.316406 20.976562 31.316406 44.851562 20.007812 C 47.839844 18.601562 51.414062 19.863281 52.820312 22.851562 C 54.226562 25.839844 52.96875 29.414062 49.980469 30.820312 C 30.320312 40.136719 18.132812 58.972656 18.132812 80.039062 C 18.132812 110.242188 43.652344 134.824219 75 134.824219 C 106.347656 134.824219 131.867188 110.242188 131.867188 80.039062 C 131.867188 58.828125 118.976562 39.34375 98.996094 30.378906 C 95.976562 29.03125 94.628906 25.488281 95.976562 22.46875 C 97.324219 19.453125 100.867188 18.105469 103.886719 19.480469 C 128.171875 30.351562 143.847656 54.140625 143.847656 80.039062 C 143.847656 116.835938 112.96875 146.777344 75 146.777344 Z M 75 146.777344 "/>
//<path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;" d="M 75 84.34375 C 71.6875 84.34375 69.023438 81.679688 69.023438 78.367188 L 69.023438 9.199219 C 69.023438 5.890625 71.71875 3.222656 75 3.222656 C 78.3125 3.222656 80.976562 5.890625 80.976562 9.199219 L 80.976562 78.367188 C 80.976562 81.679688 78.308594 84.34375 75 84.34375 Z M 75 84.34375 "/>`,
    

const createText = (text, color, size, weight, y, font) => `
    <text 
        stroke="black" 
        fill="${color}" 
        stroke-width="1" 
        style="font-size:${size}px;" 
        font-weight="${weight}" 
        font-family="${font || 'Archivo Black'}, sans-serif";
        x="50%" 
        y="${y}%" 
        dominant-baseline="middle" 
        text-anchor="middle"
    >
        ${text}
    </text> `
